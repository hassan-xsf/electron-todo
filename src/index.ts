import { app, BrowserWindow, ipcMain } from "electron";
import dotenv from "dotenv";
import { connectDB } from "./db/connect";
+dotenv.config();

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

const db = connectDB();
ipcMain.on("health-check", async (event, msg: String) => {
  console.log(msg);
});

ipcMain.handle("createTodo", async (event, todo) => {
  console.log("creating todo...");
  const { title, description, completed, deadline, color } = todo;

  try {
    const query = `INSERT INTO todos (title, description, completed , deadline , color) VALUES (?, ?, ? , ? , ?)`;

    const [result]: any = await db
      .promise()
      .query(query, [title, description, completed, deadline, color]);

    return { success: true, result: result };
  } catch (err: any) {
    console.error("Error inserting todo:", err);
    return { success: false, error: err.message };
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
